buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'findbugs'
apply plugin: 'pmd'

def CORE_SDK_VERSION = "15.10.30"

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }    

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }

    android {
        lintOptions {
            abortOnError false
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "SDK_VERSION", "\"${CORE_SDK_VERSION}\""
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "SDK_VERSION", "\"${CORE_SDK_VERSION}\""
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

task findbugs(type: FindBugs) {
    ignoreFailures = true
        classes = fileTree('build/intermediates/classes/release')
        source = fileTree('src')
        classpath = files()
        effort = 'max'
        reports {
            xml.enabled = false
                html.enabled = true
        }
}

task pmd(type: Pmd) {
    source fileTree('src')

        ruleSets = [
        'java-android',
        'java-basic',
        'java-braces',
        'java-clone',
        'java-codesize',
        'java-comments',
        'java-controversial',
        'java-coupling',
        'java-design',
        'java-empty',
        'java-finalizers',
        'java-imports',
        'java-j2ee',
        'java-javabeans',
        'java-junit',
        'java-logging-jakarta-commons',
        'java-logging-java',
        'java-migrating',
        'java-naming',
        'java-optimizations',
        'java-strictexception',
        'java-strings',
        'java-sunsecure',
        'java-typeresolution',
        'java-unnecessary',
        'java-unusedcode'
            ]

            reports {
                xml.enabled = false
                    html.enabled = true
            }
}

task clearJar(type: Delete) {
    delete 'build/outputs/corelib*'
}

task makeJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('build/outputs/')
    include('classes.jar')
    rename ('classes.jar', 'corelib_' + "${CORE_SDK_VERSION}" + '.jar' )
}

makeJar.dependsOn(clearJar, build)

